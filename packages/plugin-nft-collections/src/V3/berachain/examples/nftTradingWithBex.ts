import { ethers } from "ethers";
import { BexIntegrationFactory } from "../integration/BexIntegrationFactory";
import { BEX_CONSTANTS } from "../constants/bex";

async function main() {
  // Setup provider and signer
  const provider = new ethers.providers.JsonRpcProvider("https://rpc.berachain.com");
  const privateKey = process.env.PRIVATE_KEY!;
  
  // Create BEX integration service
  const bexIntegration = await BexIntegrationFactory.create(provider, privateKey);
  
  // Example: Swap BERA for an NFT collection token
  const NFT_COLLECTION_TOKEN = "0x1234567890123456789012345678901234567890"; // Replace with actual address
  const amountIn = ethers.utils.parseEther("10"); // 10 BERA
  
  try {
    // Check if BEX is available on this network
    const isAvailable = await BexIntegrationFactory.isAvailable(provider);
    if (!isAvailable) {
      console.error("BEX is not available on this network");
      return;
    }
    
    // Check if the NFT collection token has liquidity
    const hasLiquidity = await bexIntegration.checkTokenLiquidity(NFT_COLLECTION_TOKEN);
    if (!hasLiquidity) {
      console.log("NFT collection token doesn't have liquidity, creating a pool...");
      
      // Create a liquidity pool for the NFT collection
      const initialTokenAmount = ethers.utils.parseEther("1000"); // 1000 collection tokens
      const initialBeraAmount = ethers.utils.parseEther("10"); // 10 BERA
      
      const poolAddress = await bexIntegration.createLiquidityPoolForCollection(
        NFT_COLLECTION_TOKEN,
        BEX_CONSTANTS.BERA_ADDRESS,
        initialTokenAmount,
        initialBeraAmount
      );
      
      console.log("Created new pool at address:", poolAddress);
    }
    
    // Swap BERA for NFT collection tokens
    const swapTx = await bexIntegration.swapForNFTPurchase(
      BEX_CONSTANTS.BERA_ADDRESS,
      NFT_COLLECTION_TOKEN,
      amountIn,
      "1" // 1% slippage
    );
    
    console.log("Swap transaction hash:", swapTx.hash);
    await swapTx.wait();
    console.log("Swap completed successfully!");
    
    // Create a position in the position manager
    // This would typically be done through your V3 position manager
    // For demonstration purposes, we'll use a direct call
    const positionId = "position-123"; // This would be generated by your position manager
    
    // Execute a trade based on a position
    const positionTradeTx = await bexIntegration.executePositionTrade(
      positionId,
      'enter',
      ethers.utils.parseEther("5") // 5 BERA
    );
    
    if (positionTradeTx) {
      console.log("Position trade transaction hash:", positionTradeTx.hash);
      await positionTradeTx.wait();
      console.log("Position trade completed successfully!");
    }
    
  } catch (error) {
    console.error("Error:", error);
  }
}

main().catch(console.error); 